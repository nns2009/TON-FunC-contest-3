{-
	In TON there is a limit on the size of the external message which can be sent equal to 64 kB. Sometimes it is necessary to send a larger message; it requires the onchain construction of one message from multiple smaller parts. Your task is to create such construction contract.
	In particular, a contestant needs to develop a FunC contract with two features:
		a) it has get_method "decomposite" for decomposition of large cell to parts: it accepts 1 cell (number_of_bits<1000000, number_of_cells<4000 , depth<256) and 1 address and returns tuple of cells (each of which has less than 1000 distinct cells and 40000 bits total), those cells will be transformed to slice and sent as internal message body to the contract.
		b) recv_internal should handle those internal messages from get-method described above and upon receiving last one, send initial large cell to the address (coins amount 0, mode 0). For simplicity, it is guaranteed that messages will be sent exactly in the order in which they were in decomposite output and no other messages will be sent in between.
	Note, that initial state of contract storage will be empty cell: cell with zero bits and refs.
-}


int tuple_len(tuple t) asm "TLEN";
forall X -> (tuple, X) tuple_pop(tuple t) asm "TPOP";

(cell, int) udict_get_ref?fixed(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGETREF" "NULLSWAPIFNOT";


const Cell_Max_Bits = 1023;
const Cell_Max_Refs = 4;


const int group_max_cells = 15; ;; 30 * 1023 = 30690 < 40000 with some extra room just in case


const int groups_dict_len = 10; ;; Should store up to 255 entries, but let's be safe
const int command_len = 3;
const int bitslen_len = 10; ;; bitslen from 0 to 1023 (inclusive) - covers all cases

const int create_builder_code = 4;
;; const int push_ref_code = 2;
;; const int push_bits_code = 3;
const int end_builder_code = 5;
;; const int command_send_code = 5;


(int, cell) load_data() {
	slice cs = get_data().begin_parse();
	if (cs.slice_data_empty?()) {
		return (0, new_dict());
	}

	int group_count = cs~load_uint(16);
	cell groups = cs~load_dict();
	return (group_count, groups);
}

() save_data(int group_count, cell groups) impure {
	set_data(begin_cell()
		.store_uint(group_count, 16)
		.store_dict(groups)
		.end_cell()
	);
}



global int in_cells_count;
global int in_cells_index;
global cell in_cells; 
global slice in_cs;

() read_structure_advance(int len) impure {
	;; dump_stack();
	;; len~dump();
	if (in_cs.slice_bits() < len) {
		if (in_cs.slice_refs_empty?()) {
			in_cells_index += 1;
			if (in_cells_index >= in_cells_count) {
				throw(444); ;; Remove for optimization?
			}
			(cell next_group, int f) = in_cells.udict_get_ref?fixed(groups_dict_len, in_cells_index);
			;; f should always be "true" (found) because we iterate through known indexes
			in_cs = next_group.begin_parse();
		} else {
			in_cs = in_cs.preload_ref().begin_parse();
		}
	}
}

int read_uint(int len) impure {
	read_structure_advance(len);
	(slice ncs, int res) = in_cs.load_uint(len);
	in_cs = ncs;
	;; int res = in_cs~load_uint(len);
	return res;
}
;; No <function templating> in FunC => copy-paste :(
slice read_slice(int len) impure {
	read_structure_advance(len);
	(slice ncs, slice res) = in_cs.load_bits(len);
	in_cs = ncs;
	;; slice res = in_cs~load_slice(len);
	return res;
}

int read_op_code() impure {
	return read_uint(command_len);
}
slice read_bits() impure {
	int bitslen = read_uint(bitslen_len);
	return read_slice(bitslen);
}


cell restore() impure {
	;; ~dump(100300500);
	builder b = begin_cell();

	do {
		int op_code = read_op_code();
		;; op_code~dump();

		int leave = 0;
		if (op_code == create_builder_code) {
			cell child = restore();
			b = b.store_ref(child);
		}
		elseif (op_code == end_builder_code) {
			slice bits = read_bits();
			b = b.store_slice(bits);
			;; return b.end_cell();
			leave = 1;
		}
	} until (leave);

	;; cell res = b.end_cell();
	;; res~dump();

	;; ~dump(100300999);
	return b.end_cell();
	;; unreachable, but stupid FunC compiler complanes about return type
}


;; body = Maybe<destination>, ^group
;; testable
() recv_internal (slice body) {
	int finish = body~load_int(1);
	slice destination = null();
	if (finish) {
		destination = body~load_msg_addr(); ;; ! Move down
	}

	(int group_count, cell groups) = load_data();
	groups~udict_set_ref(groups_dict_len, group_count, body.preload_ref());
	group_count += 1;

	if (finish) {
		in_cells_count = group_count;
		in_cells_index = 0;
		in_cells = groups;
		{
			(cell group, int f) = groups.udict_get_ref?fixed(groups_dict_len, 0);
			;; f has to be "true", because we are iterating through "known" indexes
			in_cs = group.begin_parse();
		}

		read_op_code(); ;; Skip the first instruction, it should always be "create_builder"
		cell full = restore();

		var msg = begin_cell()
			.store_uint(0x18, 6)
			.store_slice(destination)
			.store_coins(0)
			.store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
			.store_ref(full)
			;; .store_ref(begin_cell().store_ref(full).end_cell())
			.end_cell();
		send_raw_message(msg, 0);

		;; int i = 0;
		;; while (i < group_count) {
		;; 	(cell group, int f) = groups.udict_get_ref?fixed(groups_dict_len, i);
		;; 	;; f has to be "true", because we are iterating through "known" indexes
		;; 	process_group(group);

		;; 	i += 1;
		;; }

		save_data(0, new_dict()); ;; Wipe state
	} else {
		save_data(group_count, groups);
	}

}




global tuple bs; ;; BuilderS
global tuple out_cells;


builder bs_pop() impure {
	(tuple nbs, builder res) = bs.tuple_pop();
	bs = nbs;
	return res;
}

;; () out_cells_push(cell c) impure {
;; 	out_cells = out_cells.tpush(c);
;; }


;; 'bs' length has to be >= 1 !
() collapse_builders() impure {
	builder inner = bs_pop();

	cell c = inner.end_cell();
	repeat (bs.tuple_len()) {
		builder b = bs_pop();
		c = b.store_ref(c).end_cell();
	}

	out_cells = out_cells.tpush(c);
}
() collapse_remaining_builders() impure {
	;; Actually, it seems like it should always be true:
	if (bs.tuple_len() >= 1) {
		collapse_builders();
	}
}
() maybe_collapse_builders() impure {
	if (bs.tuple_len() >= group_max_cells) {
		collapse_builders();
	}
}


builder write_structure_advance(int len) impure {
	builder b = bs_pop();
	if (b.builder_bits() + len > Cell_Max_Bits) {
		bs = bs.tpush(b);
		maybe_collapse_builders();
		b = begin_cell();
	}
	return b;
}
() write_uint(int v, int len) impure {
	builder b = write_structure_advance(len);
	b~store_uint(v, len);
	bs = bs.tpush(b);
}
() write_slice(slice bits) impure {
	builder b = write_structure_advance(bits.slice_bits());
	b = b.store_slice(bits);
	bs = bs.tpush(b);
}


() write_op_code(int code) impure {
	write_uint(code, command_len);
}
() write_bits(slice bits) impure {
	write_uint(bits.slice_bits(), bitslen_len);
	write_slice(bits);
}

() create_builder() impure {
	write_op_code(create_builder_code);
}
() end_builder(slice bits) impure {
	write_op_code(end_builder_code);
	write_bits(bits);
}


() flatten(cell c) impure {
	create_builder();

	slice cs = c.begin_parse();
	while (~ cs.slice_refs_empty?()) {
		cell child = cs~load_ref();
		flatten(child);
	}

	end_builder(cs);
}

slice test_slice() asm "b{010110111} PUSHSLICE";
cell test_cell() {
	return begin_cell().store_slice(test_slice()).end_cell();
}

;; testable
tuple decomposite (cell big_cell, slice destination_address) method_id {
	bs = empty_tuple(); ;; Stupid compiler doesn't accept [begin_cell()]
	bs = bs.tpush(begin_cell());
	out_cells = empty_tuple();

	;; out_cells = out_cells.tpush(test_cell());
	;; return out_cells;

	flatten(big_cell);
	collapse_remaining_builders();

	;; return out_cells;

	tuple res_cells = empty_tuple();

	int group_count = out_cells.tuple_len();
	int last_i = group_count - 1;

	int i = 0;
	while (i < last_i) {
		cell res_i = begin_cell()
			.store_int(0, 1)
			.store_ref(out_cells.at(i))
			.end_cell();
		res_cells~tpush(res_i);

		i += 1;
	}
	cell res_last = begin_cell()
		.store_int(-1, 1)
		.store_slice(destination_address)
		.store_ref(out_cells.at(last_i))
		.end_cell();
	res_cells~tpush(res_last);
	
	return res_cells;
}
